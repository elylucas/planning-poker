{"version":3,"sources":["../../src/test/room.test.js"],"names":[],"mappings":"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","file":"room.test.js","sourcesContent":["import {expect} from 'chai';\nimport {createRoom, joinRoom, leaveRoom, castVote, resetVote} from '../rooms';\nimport {Map, List, fromJS} from 'immutable';\n\ndescribe('Room', function(){\n\n  describe('createRoom', () =>{\n\n    it('should add a room with roomId and user to state when called', ()=>{\n      const roomId = '1234';\n      const user = {\n        id: '4567',\n        name: 'Joe',\n        vote: null,\n        isSpectator: false,\n        isAfk: false\n      };\n      const initialState = List();\n\n      let newState = createRoom(initialState, roomId, user);\n\n      expect(newState).to.equal(fromJS(\n        [\n          {\n            id: '1234',\n            users: [\n              user\n            ]\n          }\n        ]\n      ));\n\n    });\n\n    it('should add room to state that already has rooms', ()=>{\n      var state = List.of(Map({\n        roomId: 1234,\n        users: []\n      }));\n      const user = {\n        id: '4567',\n        name: 'Joe',\n        vote: null,\n        isSpectator: false,\n        isAfk: false\n      };\n      let newState = createRoom(state, '5678', user);\n\n      expect(newState.size).to.equal(2);\n    });\n\n  });\n\n  describe('joinRoom', () => {\n    it('should join user to room when new user joins', ()=>{\n      var user = {\n        id: '4567',\n        name: 'Joe',\n        vote: null,\n        isSpectator: false,\n        isAfk: false\n      };\n\n      var state = fromJS(\n        [\n          {\n            id: '1234',\n            users: [user]\n          }\n        ]\n      );\n\n      const newUser = {\n        id: '6789',\n        name: 'Matt',\n        vote: null,\n        isSpectator: false,\n        isAfk: false\n      };\n\n      let newState = joinRoom(state, '1234', newUser);\n\n      expect(newState).to.equal(fromJS(\n        [\n          {\n            id: '1234',\n            users: [\n              user, newUser\n            ]\n          }\n        ]\n      ));\n    });\n\n  });\n\n  describe('castVote', () => {\n    it('should update user with vote when vote cast', () => {\n      var user = {\n        id: '4567',\n        name: 'Joe',\n        vote: null,\n        isSpectator: false,\n        isAfk: false\n      };\n\n      var state = fromJS(\n        [\n          {\n            id: '1234',\n            users: [user]\n          }\n        ]\n      );\n\n      let newState = castVote(state, '4567', '1234', '8');\n      expect(newState).to.equal(fromJS(\n        [\n          {\n            id: '1234',\n            users: [\n              Object.assign(user, {vote: '8'})\n            ]\n          }\n        ]\n      ));\n    })\n  });\n\n  describe('leaveRoom', ()=>{\n\n    it('should remove the user from the room when a user leaves', ()=>{\n\n      var user1 = {\n        id: 'user123',\n        name: 'Joe',\n        vote: null,\n        isSpectator: false,\n        isAfk: false\n      };\n\n      var user2 = Object.assign(user1, {id: 'user456'});\n\n      var state = fromJS(\n        [\n          {\n            id: 'room123',\n            users: [user1, user2]\n          }\n        ]\n      );\n\n      let newState = leaveRoom(state, 'room123', 'user123');\n\n      expect(newState).to.equal(fromJS(\n        [\n          {\n            id: 'room123',\n            users: [\n              user2\n            ]\n          }\n        ]\n      ));\n\n    })\n\n  });\n\n  describe('resetVote', ()=>{\n\n    it('should reset all the votes back to an empty string', ()=>{\n      var user1 = {\n        id: 'user123',\n        name: 'Joe',\n        vote: '8',\n        isSpectator: false,\n        isAfk: false\n      };\n\n      var user2 = Object.assign(user1, {id: 'user456', vote: '4'});\n      var state = fromJS(\n        [\n          {\n            id: 'room123',\n            users: [user1, user2]\n          }\n        ]\n      );\n\n      let newState = resetVote(state, 'room123');\n\n      expect(newState).to.equal(fromJS(\n        [\n          {\n            id: 'room123',\n            users: [\n              Object.assign(user1, {vote: ''}),\n              Object.assign(user2, {vote: ''})              \n            ]\n          }\n        ]\n      ));\n\n    });\n\n  })\n\n});\n"]}