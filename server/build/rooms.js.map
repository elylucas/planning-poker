{"version":3,"sources":["../src/rooms.js"],"names":[],"mappings":"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","file":"rooms.js","sourcesContent":["import {Map, List, fromJS} from 'immutable';\n\nexport function createRoom(rooms, roomId, user) {\n  let newRooms = rooms.push(fromJS({\n      id: roomId,\n      users: [user]\n    }));\n  return newRooms;\n}\n\nexport function joinRoom(rooms, roomId, user) {\n  var room = rooms.find(room => room.get('id') === roomId);\n  var roomIndex = rooms.indexOf(room);\n  var newUsers = room.get('users').push(Map(user));\n  var newRoom = room.set('users', newUsers);\n  var newRooms = rooms.set(roomIndex, newRoom);\n  return newRooms;\n}\n\nexport function leaveRoom(rooms, roomId, userId) {\n  var room = rooms.find(room => room.get('id') === roomId);\n  var roomIndex = rooms.indexOf(room);\n  var user = room.get('users').find(u => u.get('id') === userId);\n  var userIndex = room.get('users').indexOf(user);\n  var newUsers = room.get('users').delete(userIndex);\n  var newRoom = room.set('users', newUsers);\n  var newRooms = rooms.set(roomIndex, newRoom);\n  return newRooms;\n}\n\nexport function castVote(rooms, userId, roomId, vote) {\n  var room = rooms.find(room => room.get('id') === roomId);\n  var roomIndex = rooms.indexOf(room);\n  var users = room.get('users');\n  var user = users.find(u => u.get('id') === userId);\n  var userIndex = users.indexOf(user);\n  var newUser = user.set('vote', vote);\n  var newUsers = users.set(userIndex, newUser);\n  var newRoom = room.set('users', newUsers);\n  var newRooms = rooms.set(roomIndex, newRoom);\n  return newRooms;\n}\n\nexport function resetVote(rooms, roomId) {\n  var room = rooms.find(room => room.get('id') === roomId).toJS();\n  var roomIndex = rooms.indexOf(room);\n  room.users.forEach(user => {\n    user.vote = '';\n  });\n  var newRoom = fromJS(room);\n  var newRooms = rooms.set(roomIndex, newRoom);\n  return newRooms;\n}\n"]}